"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8495],{6227:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=s(4848),r=s(8453);const i={sidebar_position:2},o="Speech-To-Text (STT)",c={id:"references/stt",title:"Speech-To-Text (STT)",description:"Overview",source:"@site/content/references/stt.md",sourceDirName:"references",slug:"/references/stt",permalink:"/xrx-core/docs/references/stt",draft:!1,unlisted:!1,editUrl:"https://github.com/8090-inc/xrx-core/blob/develop/docs/content/references/stt.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Orchestrator",permalink:"/xrx-core/docs/references/orchestrator"},next:{title:"Text-To-Speech (TTS)",permalink:"/xrx-core/docs/references/tts"}},a={},l=[{value:"Overview",id:"overview",level:3},{value:"Endpoint",id:"endpoint",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Connection",id:"connection",level:3},{value:"Messages",id:"messages",level:3},{value:"Binary Messages",id:"binary-messages",level:4},{value:"Events",id:"events",level:3},{value:"message",id:"message",level:4},{value:"close",id:"close",level:4},{value:"Server Responses",id:"server-responses",level:3},{value:"Text Responses",id:"text-responses",level:4},{value:"Error Handling",id:"error-handling",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"FastAPI Application Code",id:"fastapi-application-code",level:3},{value:"STT Interface Code",id:"stt-interface-code",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"speech-to-text-stt",children:"Speech-To-Text (STT)"}),"\n",(0,t.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"This WebSocket API allows clients to connect to a server for real-time speech-to-text (STT) transcription. The server supports multiple STT providers and handles both text and binary messages."}),"\n",(0,t.jsx)(n.h3,{id:"endpoint",children:"Endpoint"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"URL:"})," ",(0,t.jsx)(n.code,{children:"/api/v1/ws"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method:"})," ",(0,t.jsx)(n.code,{children:"GET"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Protocol:"})," WebSocket"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/8090-inc/xrx/blob/main/orchestrator/src/Session.ts#30%2C7-30%2C7",children:"STT_PROVIDER"}),": Specifies the STT provider to use (",(0,t.jsx)(n.code,{children:'"faster_whisper"'}),", ",(0,t.jsx)(n.code,{children:'"groq"'}),", ",(0,t.jsx)(n.code,{children:'"deepgram"'}),"). Default is ",(0,t.jsx)(n.code,{children:'"faster_whisper"'}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"connection",children:"Connection"}),"\n",(0,t.jsx)(n.p,{children:"Upon connecting to the WebSocket endpoint, the server will log the connection and initialize the STT model."}),"\n",(0,t.jsx)(n.h3,{id:"messages",children:"Messages"}),"\n",(0,t.jsx)(n.p,{children:"The server handles binary messages containing audio data."}),"\n",(0,t.jsx)(n.h4,{id:"binary-messages",children:"Binary Messages"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Format:"})," Binary audio data. All STT providers are expecting PCM, 16-bit, 16000 Hz, mono audio."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,t.jsx)(n.h4,{id:"message",children:(0,t.jsx)(n.a,{href:"https://github.com/8090-inc/xrx/blob/main/orchestrator/src/Session.ts#133%2C75-133%2C75",children:"message"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Triggered when a binary message (audio data) is received from the client."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/8090-inc/xrx/blob/main/orchestrator/src/Session.ts#178%2C59-178%2C59",children:"data"}),": The binary message data (audio)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Handling Binary Messages:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The server will transcribe the binary data (audio) to text using the configured STT model and send the transcribed text back to the client."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"close",children:(0,t.jsx)(n.a,{href:"https://github.com/8090-inc/xrx/blob/main/orchestrator/src/Session.ts#172%2C5-172%2C5",children:"close"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Triggered when the client closes the connection."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/8090-inc/xrx/blob/main/orchestrator/src/Index.ts#38%2C21-38%2C21",children:"code"}),": The close code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/8090-inc/xrx/blob/main/orchestrator/src/Index.ts#93%2C35-93%2C35",children:"reason"}),": The reason for closing"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"server-responses",children:"Server Responses"}),"\n",(0,t.jsx)(n.h4,{id:"text-responses",children:"Text Responses"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Format:"})," Plain text"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Content:"})," The transcribed text from the audio data"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If the STT provider is unsupported, the server raises a ",(0,t.jsx)(n.a,{href:"https://github.com/8090-inc/xrx/blob/main/stt/app/main.py#28%2C23-28%2C23",children:"ValueError"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"If the WebSocket connection is disconnected, the server logs the disconnection and closes the STT model."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Connecting to the WebSocket:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const socket = new WebSocket('ws://localhost:8000/api/v1/ws');\n\nsocket.onopen = () => {\n  console.log('Connection opened');\n};\n\nsocket.onmessage = (event) => {\n  console.log('Received message:', event.data);\n};\n\nsocket.onclose = (event) => {\n  console.log(`Connection closed: ${event.code} ${event.reason}`);\n};\n\nsocket.onerror = (error) => {\n  console.error('WebSocket error:', error);\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Sending a Binary Message:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const audioData = new Uint8Array([/* audio data */]);\nsocket.send(audioData);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"fastapi-application-code",children:"FastAPI Application Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, WebSocket, WebSocketDisconnect\nimport os\nimport logging\nfrom groq_stt import GroqSTT\nfrom deepgram_stt import DeepGramSTT\nfrom faster_whisper_stt import FasterWhisperSTT\n\napp = FastAPI()\nSTT_PROVIDER = os.environ.get("STT_PROVIDER", "faster_whisper")\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass STTFactory:\n    _instance = None\n\n    @classmethod\n    def get_instance(cls, provider: str):\n        if cls._instance is None:\n            if provider == "faster_whisper":\n                cls._instance = FasterWhisperSTT()\n            elif provider == "groq":\n                cls._instance = GroqSTT()\n            elif provider == "deepgram":\n                cls._instance = DeepGramSTT()\n            else:\n                raise ValueError(f"Unsupported STT provider: {provider}")\n        return cls._instance\n\n@app.websocket("/api/v1/ws")\nasync def websocket_endpoint(websocket: WebSocket):\n    stt_model = STTFactory.get_instance(STT_PROVIDER)\n    await websocket.accept()\n    try:\n        logger.info("WebSocket connection established.")\n\n        async def text_handler(text):\n            await websocket.send_text(text)\n\n        await stt_model.initialize(text_handler)\n\n        while True:\n            data = await websocket.receive_bytes()\n            result = await stt_model.transcribe(data)\n\n            if result:\n                await websocket.send_text(result)\n                \n    except WebSocketDisconnect:\n        await stt_model.close()\n        logger.info("Client disconnected")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"stt-interface-code",children:"STT Interface Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\nclass STTInterface(ABC):\n    """Interface for speech-to-text services."""\n\n    @abstractmethod\n    async def initialize(self, text_handler: callable = None):\n        """Initialize the STT service."""\n        pass\n\n    @abstractmethod\n    async def transcribe(self, data: bytearray) -> str:\n        """Transcribe audio data to text."""\n        pass\n\n    @abstractmethod\n    async def close(self):\n        """Close the connection to the service."""\n        pass\n\n    @property\n    @abstractmethod\n    def is_open(self) -> bool:\n        """Check if the connection is open."""\n        pass\n'})}),"\n",(0,t.jsx)(n.p,{children:"This documentation provides an overview of the WebSocket API, including connection details, message formats, events, and example usage for the STT service."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);